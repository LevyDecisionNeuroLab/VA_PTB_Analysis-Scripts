function [ onsets, offsets ] = getBlockOnsetOffset(prtblock, DiscAcq, tr, trialduration)
% GETBLOCKONSETOFFSET Extracts onsets and offsets for a particular choice block,
%   converting from seconds to volumes.
%
% Author: Simon Podhajsky (simon.podhajsky@yale.edu), 2016/03/18
%
% ## Arguments
%
% prtblock -- 31-by-5 matrix generated by subsetting the output of PTB_Protocol_OnsetExtract.
%   It has start times in seconds of each choice stage, normalized to begin at 0 for first
%   choice.
% DiscAcq -- number of volumes (?) to drop from the start, shifting the timing.
%   This is the value entered into BrainVoyager.
% tr -- temporal resolution of scanner, in seconds
% trialduration -- what number of volumes *including onset* should be captured.
%   Used if greater than zero. 
% rt -- response time, use to model the response period. Added by Ruonan 5/19/16
%
% ## Outputs
%
% onsets -- 30-by-2 matrix of initial volumes to analyze, per trial,1 column: lottery duration, 2 column: response
% offsets -- 30-by-2 matrix of last volumes to analyze, per trial,
%
%   Values are inclusive. (TODO: Check that this is the case for BV/NE.)
%
% ## Logic
%
% (round(t) / TR) + 1 converts *start times*  to volumes. (End times don't
% need the `+ 1`. The addition of 1 compensates for the fact that volumes
% start at 1, whereas times start at 0. Why the difference between start
% and end times? If a trial starts at 0 and ends at 2.99, you want volumes
% 1 through 3, not 1 through 4.)
%
% The offset is either calculated by adding (trialduration - 1) to onsets
% (since trialduration already includes onsets), or by reading the volume
% value from prtblock. (This is currently hard-coded as the second column,
% but could be subject to TODO / change in code.)

% TODO: Universalize to different-length blocks than the one in VA_RA_PTB: 
%   e.g. NumTrialsDiscard = 1, for prtblock = prtblock((1 + NumTrialsDiscard):31)?

% 1. Subset to trials of interest only (e.g. exclude first trial)
prtblock = prtblock(2:31, :);

% 2. Round to nearest second and begin second-to-volume conversion by dividing by TR
prtblock = round(prtblock) ./ tr;

% 3. Add 1 to start time (should be altered if more than choice display is analyzed)
prtblock(:, 1) = prtblock(:, 1) + 1;

% 4. Remove discarded acquisitions (DiscAcq number of volumes), shifting all values
prtblock = prtblock - DiscAcq; 

% 5. Extract onset values for lottery duration
onsets(:,1)  = prtblock(:, 1);

% 6. Compute offset values with onset + trialduration, or extract them from prtblock
if ~isnan(trialduration) && trialduration > 0
  offsets(:,1) = prtblock(:, 1) + (trialduration - 1);
else
  offsets(:,1) = prtblock(:, 2); % NOTE: change to value of interest here
end

% 7. Onset and offset for response time. 
onsets(:,2) = prtblock(:,1) + trialduration ; % no need to add one here because tiralduration has already included one more volume
offsets(:,2) = prtblock(:,4); %0.5s after feedback deplay, round to the nearest integer to the positive infinity
% The issue here is that some rt is so short, the onset maybe bigger the the offset.
offsets(find(onsets(:,2) > offsets(:,2)), 2) = offsets(find(onsets(:,2)>offsets(:,2)),2)+1;

end

